<tmx version="1.4">
	<header>
		<prop type="title">
    MobileNetV2——Inverted Residuals and Linear Bottlenecks论文翻译——中英文对照 | SnailTyan
   		</prop>
		<prop type="domain">ComSciTech</prop>
		<prop type="sub_domain">Deep Learning</prop>
	</header>
	<body>
,	<tu tuid = "0">
		<tuv xml:lang = "en-US">
			<seg>
           In this paper we describe a new mobile architecture, MobileNetV2, that improves the state of the art performance of mobile models on multiple tasks and benchmarks as well as across a spectrum of different model sizes. We also describe efficient ways of applying these mobile models to object detection in a novel framework we call SSDLite. Additionally, we demonstrate how to build mobile semantic segmentation models through a reduced form of DeepLabv3 which we call Mobile DeepLabv3.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           在本文中，我们描述了一种新的移动架构MobileNetV2，该架构提高了移动模型在多个任务和多个基准数据集上以及在不同模型尺寸范围内的最佳性能。我们还描述了在我们称之为SSDLite的新框架中将这些移动模型应用于目标检测的有效方法。此外，我们还演示了如何通过DeepLabv3的简化形式，我们称之为Mobile DeepLabv3来构建移动语义分割模型。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "1">
		<tuv xml:lang = "en-US">
			<seg>
           The MobileNetV2 architecture is based on an inverted residual structure where the shortcut connections are between the thin bottle-neck layers. The intermediate expansion layer uses lightweight depthwise convolutions to filter features as a source of non-linearity. Additionally, we find that it is important to remove non-linearities in the narrow layers in order to maintain representational power. We demonstrate that this improves performance and provide an intuition that led to this design.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           MobileNetV2架构基于倒置的残差结构，其中快捷连接位于窄的瓶颈层之间。中间展开层使用轻量级的深度卷积作为非线性源来过滤特征。此外，我们发现为了保持表示能力，去除窄层中的非线性是非常重要的。我们证实了这可以提高性能并提供了产生此设计的直觉。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "2">
		<tuv xml:lang = "en-US">
			<seg>
           Finally, our approach allows decoupling of the input/output domains from the expressiveness of the transformation, which provides a convenient framework for further analysis. We measure our performance on ImageNet [1] classification, COCO object detection [2], VOC image segmentation [3]. We evaluate the trade-offs between accuracy, and number of operations measured by multiply-adds (MAdd), as well as actual latency, and the number of parameters.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           最后，我们的方法允许将输入/输出域与变换的表现力解耦，这为进一步分析提供了便利的框架。我们在ImageNet[1]分类，COCO目标检测[2]，VOC图像分割[3]上评估了我们的性能。我们评估了在精度、通过乘加（MAdd）度量的操作次数，以及实际的延迟和参数的数量之间的权衡。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "3">
		<tuv xml:lang = "en-US">
			<seg>
           Neural networks have revolutionized many areas of machine intelligence, enabling superhuman accuracy for challenging image recognition tasks. However, the drive to improve accuracy often comes at a cost: modern state of the art networks require high computational resources beyond the capabilities of many mobile and embedded applications.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           神经网络已经彻底改变了机器智能的许多领域，使具有挑战性的图像识别任务获得了超过常人的准确性。然而，提高准确性的驱动力往往需要付出代价：现代先进网络需要超出许多移动和嵌入式应用能力之外的高计算资源。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "4">
		<tuv xml:lang = "en-US">
			<seg>
           This paper introduces a new neural network architecture that is specifically tailored for mobile and resource constrained environments. Our network pushes the state of the art for mobile tailored computer vision models, by significantly decreasing the number of operations and memory needed while retaining the same accuracy.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           本文介绍了一种专为移动和资源受限环境量身定制的新型神经网络架构。我们的网络通过显著减少所需操作和内存的数量，同时保持相同的精度推进了移动定制计算机视觉模型的最新水平。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "5">
		<tuv xml:lang = "en-US">
			<seg>
           Our main contribution is a novel layer module: the inverted residual with linear bottleneck. This module takes as an input a low-dimensional compressed representation which is first expanded to high dimension and filtered with a lightweight depthwise convolution. Features are subsequently projected back to a low-dimensional representation with a linear convolution. The official implementation is available as part of TensorFlow-Slim model library in [4].
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           我们的主要贡献是一个新的层模块：具有线性瓶颈的倒置残差。该模块将输入的低维压缩表示首先扩展到高维并用轻量级深度卷积进行过滤。随后用线性卷积将特征投影回低维表示。官方实现可作为[4]中TensorFlow-Slim模型库的一部分。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "6">
		<tuv xml:lang = "en-US">
			<seg>
           This module can be efficiently implemented using standard operations in any modern framework and allows our models to beat state of the art along multiple performance points using standard benchmarks. Furthermore, this convolutional module is particularly suitable for mobile designs, because it allows to significantly reduce the memory footprint needed during inference by never fully materializing large intermediate tensors. This reduces the need for main memory access in many embedded hardware designs, that provide small amounts of very fast software controlled cache memory.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           这个模块可以使用任何现代框架中的标准操作来高效地实现，并允许我们的模型使用标准基线沿多个性能点击败最先进的技术。此外，这种卷积模块特别适用于移动设计，因为它可以通过从不完全实现大型中间张量来显著减少推断过程中所需的内存占用。这减少了许多嵌入式硬件设计中对主存储器访问的需求，这些设计提供了少量高速软件控制缓存。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "7">
		<tuv xml:lang = "en-US">
			<seg>
           Tuning deep neural architectures to strike an optimal balance between accuracy and performance has been an area of active research for the last several years. Both manual architecture search and improvements in training algorithms, carried out by numerous teams has lead to dramatic improvements over early designs such as AlexNet [5], VGGNet [6], GoogLeNet [7]. , and ResNet [8]. Recently there has been lots of progress in algorithmic architecture exploration included hyper-parameter optimization [9, 10, 11] as well as various methods of network pruning [12, 13, 14, 15, 16, 17] and connectivity learning [18, 19]. A substantial amount of work has also been dedicated to changing the connectivity structure of the internal convolutional blocks such as in ShuffleNet [20] or introducing sparsity [21] and others [22].
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           调整深层神经架构以在精确性和性能之间达到最佳平衡已成为过去几年研究活跃的一个领域。由许多团队进行的手动架构搜索和训练算法的改进，已经比早期的设计（如AlexNet[5]，VGGNet [6]，GoogLeNet[7]和ResNet[8]）有了显著的改进。最近在算法架构探索方面取得了很多进展，包括超参数优化[9，10，11]、各种网络修剪方法[12，13，14，15，16，17]和连接学习[18，19]。 也有大量的工作致力于改变内部卷积块的连接结构如ShuffleNet[20]或引入稀疏性[21]和其他[22]。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "8">
		<tuv xml:lang = "en-US">
			<seg>
           Recently, [23, 24, 25, 26], opened up a new direction of bringing optimization methods including genetic algorithms and reinforcement learning to architectural search. However one drawback is that the resulting networks end up very complex. In this paper, we pursue the goal of developing better intuition about how neural networks operate and use that to guide the simplest possible network design. Our approach should be seen as complimentary to the one described in [23] and related work. In this vein our approach is similar to those taken by [20, 22] and allows to further improve the performance, while providing a glimpse on its internal operation. Our network design is based on MobileNetV1 [27]. It retains its simplicity and does not require any special operators while significantly improves its accuracy, achieving state of the art on multiple image classification and detection tasks for mobile applications.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           最近，[23,24,25,26]开辟了了一个新的方向，将遗传算法和强化学习等优化方法带入架构搜索。然而，一个缺点是最终所得到的网络非常复杂。在本文中，我们追求的目标是发展了解神经网络如何运行的更好直觉，并使用它来指导最简单可能的网络设计。我们的方法应该被视为[23]中描述的方法和相关工作的补充。在这种情况下，我们的方法与[20，22]所采用的方法类似，并且可以进一步提高性能，同时可以一睹其内部的运行。我们的网络设计基于MobileNetV1[27]。它保留了其简单性，并且不需要任何特殊的运算符，同时显著提高了它的准确性，为移动应用实现了在多种图像分类和检测任务上的最新技术。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "9">
		<tuv xml:lang = "en-US">
			<seg>
           Depthwise Separable Convolutions are a key building block for many efficient neural network architectures [27, 28, 20] and we use them in the present work as well. The basic idea is to replace a full convolutional operator with a factorized version that splits convolution into two separate layers. The first layer is called a depthwise convolution, it performs lightweight filtering by applying a single convolutional filter per input channel. The second layer is a 1 × 1 convolution, called a pointwise convolution, which is responsible for building new features through computing linear combinations of the input channels.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           深度可分卷积是许多高效神经网络架构的关键组成部分[27，28，20]，我们在目前的工作中也使用它们。其基本思想是用分解版本替换完整的卷积运算符，将卷积拆分为两个单独的层。第一层称为深度卷积，它通过对每个输入通道应用单个卷积滤波器来执行轻量级滤波。第二层是1×1卷积，称为逐点卷积，它负责通过计算输入通道的线性组合来构建新特征。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "10">
		<tuv xml:lang = "en-US">
			<seg>
           Standard convolution takes an $h_i\times w_i\times d_i$ input tensor $L_i$, and applies convolutional  kernel $K\in \mathbf{R}^{k\times k \times d_i \times d_j}$ to produce an $h_i\times w_i\times d_j$ output tensor $L_j$. Standard convolutional layers have the computational cost of $h_i \cdot w_i \cdot d_i \cdot d_j \cdot k \cdot k$.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           标准卷积使用$K\in \mathbf{R}^{k\times k \times d_i \times d_j}$维的输入张量$L_i$，并对其应用卷积核$K\in \mathbf{R}^{k\times k \times d_i \times d_j}$来产生$h_i\times w_i\times d_j$维的输出张量$L_j$。标准卷积层的计算代价为$h_i \cdot w_i \cdot d_i \cdot d_j \cdot k \cdot k$。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "11">
		<tuv xml:lang = "en-US">
			<seg>
           Depthwise separable convolutions are a drop-in replacement for standard convolutional layers. Empirically they work almost as well as regular convolutions but only cost: $$\begin{equation}h_i \cdot w_i \cdot d_i (k^2 + d_j) \tag{1}\end{equation}$$ which is the sum of the depthwise and $1 \times 1$ pointwise convolutions. Effectively depthwise separable convolution reduces computation compared to traditional layers by almost a factor of $k^2$. MobileNetV2 uses $k=3$ ($3 \times 3$ depthwise separable convolutions) so the computational cost is $8$ to $9$ times smaller than that of standard convolutions at only a small reduction in accuracy [27].
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           深度可分卷积是标准卷积层的直接替换。经验上，它们几乎与常规卷积一样工作，但其成本为：$$\begin{equation}h_i \cdot w_i \cdot d_i (k^2 + d_j) \tag{1}\end{equation}$$它是深度方向和$1\times 1$逐点卷积的总和。深度可分卷积与传统卷积层相比有效地减少了几乎$k^2$倍的计算量。MobileNetV2使用$k=3$（$3\times 3$的深度可分卷积），因此计算成本比标准卷积小$8$到$9$倍，但精度只有很小的降低[27]。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "12">
		<tuv xml:lang = "en-US">
			<seg>
           It is easy to see that in general if a result of a layer transformation ReLU(Bx) has a non-zero volume $S$, the points mapped to interior $S$ are obtained via a linear transformation $B$ of the input, thus indicating that the part of the input space corresponding to the full dimensional output, is limited to a linear transformation. In other words, deep networks only have the power of a linear classifier on the non-zero volume part of the output domain. We refer to supplemental material for a more formal statement.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           很容易看出，如果层变换ReLU（Bx）的结果具有非零的体积$S$，映射到内部$S$的点通常通过输入的线性变换$B$获得，因此表明与全维度输出相对应的输入空间的一部分受限于线性变换。换句话说，深层网络只在输出域的非零体积部分具有线性分类器的能力。我们将在补充材料中进行更正式的说明。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "13">
		<tuv xml:lang = "en-US">
			<seg>
           On the other hand, when ReLU collapses the channel, it inevitably loses information in that channel. However if we have lots of channels, and there is a a structure in the activation manifold that information might still be preserved in the other channels. In supplemental materials, we show that if the input manifold can be embedded into a significantly lower-dimensional subspace of the activation space then the ReLU transformation preserves the information while introducing the needed complexity into the set of expressible functions.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           另一方面，当ReLU破坏通道时，它不可避免地会丢失该通道的信息。但是，如果我们有很多通道，并且激活流形中有一个结构，信息可能仍然保留在其它通道中。在补充材料中，我们说明，如果输入流形可以嵌入到激活空间的显著较低维子空间中，则ReLU变换将保留该信息，同时将所需的复杂性引入到可表达的函数集中。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "14">
		<tuv xml:lang = "en-US">
			<seg>
           To summarize, we have highlighted two properties that are indicative of the requirement that the manifold of interest should lie in a low-dimensional subspace of the higher-dimensional activation space:
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           总而言之，我们已经强调了两个特性，这些特性表明需要的感兴趣流行应该位于较高维激活空间的低维子空间中：
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "15">
		<tuv xml:lang = "en-US">
			<seg>
             If the manifold of interest remains non-zero volume after ReLU transformation, it corresponds to a linear transformation.
            
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           1.如果感兴趣的流形在ReLU转换后保持非零体积，则其对应于线性转换。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "16">
		<tuv xml:lang = "en-US">
			<seg>
             ReLU is capable of preserving complete information about the input manifold, but only if the input manifold lies in a low-dimensional subspace of the input space.
            
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           2.只有当输入流形位于输入空间的低维子空间时，ReLU才能保留有关输入流形的完整信息。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "17">
		<tuv xml:lang = "en-US">
			<seg>
           These two insights provide us with an empirical hint for optimizing existing neural architectures: assuming the manifold of interest is low-dimensional we can capture this by inserting linear bottleneck layers into the convolutional blocks. Experimental evidence suggests that using linear layers is crucial as it prevents non-linearities from destroying too much information. In Section 6, we show empirically that using non-linear layers in bottlenecks indeed hurts the performance by several percent, further validating our hypothesis. We note that similar reports where non-linearity was helped were reported in [29] where non-linearity was removed from the input of the traditional residual block and that lead to improved performance on CIFAR dataset.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           这两个深刻见解为我们提供了优化现有神经架构的经验提示：假设感兴趣流形是低维的，我们可以通过将线性瓶颈层插入到卷积模块中来捕获这一点。实验证据表明，使用线性层是至关重要的，因为它可以防止非线性破坏太多的信息。在第6节中，我们通过经验证明，在瓶颈中使用非线性层确实会使性能降低几个百分点，进一步证实了我们的假设。我们注意到[29]报告了非线性得到帮助的类似报告，其中非线性已从传统残差块的输入中移除，并导致CIFAR数据集的性能得到了改善。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "18">
		<tuv xml:lang = "en-US">
			<seg>
           For the remainder of this paper we will be utilizing bottleneck convolutions. We will refer to the ratio between the size of the input bottleneck and the inner size as the expansion ratio.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           对于本文的其余部分，我们将利用瓶颈卷积。我们将把输入瓶颈的大小与内部大小之间的比例作为扩展比。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "19">
		<tuv xml:lang = "en-US">
			<seg>
           The bottleneck blocks appear similar to residual block where each block contains an input followed by several bottlenecks then followed by expansion [8]. However, inspired by the intuition that the bottlenecks actually contain all the necessary information, while an expansion layer acts merely as an implementation detail that accompanies a non-linear transformation of the tensor, we use shortcuts directly between the bottlenecks. Figure 3 provides a schematic visualization of the difference in the designs. The motivation for inserting shortcuts is similar to that of classical residual connections: we want to improve the ability of a gradient to propagate across multiplier layers. However, the inverted design is considerably more memory efficient (see Section 5 for details), as well as works slightly better in our experiments.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           瓶颈块与残差块类似，其中每个块包含一个输入，然后是几个瓶颈，然后是扩展[8]。然而，受直觉的启发，瓶颈实际上包含所有必要的信息，而扩展层只是伴随张量非线性变换的实现细节，我们直接在瓶颈之间使用快捷连接。图3提供了设计差异的示意图。插入快捷连接的动机与经典的残差连接类似：我们想要提高梯度在乘法层之间传播的能力。但是，倒置设计的内存效率要高得多（详见第5节），而且在我们的实验中效果稍好。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "20">
		<tuv xml:lang = "en-US">
			<seg>
           Figure 3: The difference between residual block [8, 30] and inverted residual. Diagonally hatched layers do not use non-linearities. We use thickness of each block to indicate its relative number of channels. Note how classical residuals connects the layers with high number of channels, whereas the inverted residuals connect the bottlenecks. Best viewed in color.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           图3：残差块[8，30]和倒置残差之间的差异。对角阴影线层不使用非线性。我们用每个块的厚度来表明其相对数量的通道。注意经典残差是如何将通道数量较多的层连接起来的，而倒置残差则是连接瓶颈。最好通过颜色看。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "21">
		<tuv xml:lang = "en-US">
			<seg>
           Table 1: Bottleneck residual block transforming from $k$ to $k’$ channels, with stride $s$, and expansion factor $t$.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           表1：瓶颈残差块从$k$转换为$k’$个通道，步长为$s$，扩展系数为$t$。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "22">
		<tuv xml:lang = "en-US">
			<seg>
           Table 3: The max number of channels/memory (in Kb) that needs to be materialized at each spatial resolution for different architectures. We assume 16-bit floats for activations. For ShuffleNet, we use $2x, g = 3$ that matches the performance of MobileNetV1 and MobileNetV2. For the first layer of MobileNetV2 and ShuffleNet we can employ the trick described in Section 5 to reduce memory requirement. Even though ShuffleNet employs bottlenecks elsewhere, the non-bottleneck tensors still need to be materialized due to the presence of shortcuts between non-bottleneck tensors.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           表3：不同架构中需要在每个空间分辨率上实现的最大通道数/内存（以Kb为单位）。我们假设激活使用16位浮点数。对于ShuffleNet，我们使用与MobileNetV1和MobileNetV2的性能相匹配的$2x，g = 3 $。对于MobileNetV2和ShuffleNet的第一层，我们可以采用第5节中描述的技巧来降低内存需求。尽管ShuffleNet在其它地方使用了瓶颈，但由于存在非瓶颈张量之间的快捷连接，因此非瓶颈张量仍然需要实现。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "23">
		<tuv xml:lang = "en-US">
			<seg>
           One interesting property of our architecture is that it provides a natural separation between the input/output domains of the building blocks (bottleneck layers), and the layer transformation – that is a non-linear function that converts input to the output. The former can be seen as the capacity of the network at each layer, whereas the latter as the expressiveness. This is in contrast with traditional convolutional blocks, both regular and separable, where both expressiveness and capacity are tangled together and are functions of the output layer depth.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           我们架构的一个有趣特性是它在构建块（瓶颈层）的输入/输出域与层转换之间提供了自然分离——这是一种将输入转换为输出的非线性函数。前者可以看作是网络在每一层的容量，而后者则是表现力。与常规和可分离的传统卷积块相比，其中表现力和容量都缠结在一起并且是输出层深度的函数。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "24">
		<tuv xml:lang = "en-US">
			<seg>
           In particular, in our case, when inner layer depth is 0 the underlying convolution is the identity function thanks to the shortcut connection. When the expansion ratio is smaller than 1, this is a classical residual convolutional block [8, 30]. However, for our purposes we show that expansion ratio greater than 1 is the most useful.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           特别是在我们的实例中，当内层深度为0时，由于快捷连接，基础卷积是恒等函数。当扩展比率小于1时，这是一个经典的残差卷积块[8，30]。但是，就我们的目的而言，我们表明扩大比率大于1是最有用的。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "25">
		<tuv xml:lang = "en-US">
			<seg>
           This interpretation allows us to study the expressiveness of the network separately from its capacity and we believe that further exploration of this separation is warranted to provide a better understanding of the network properties.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           这种解释使我们能够独立于其容量研究网络的表现力，并且我们认为需要进一步探索这种分离，以便更好地理解网络性质。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "26">
		<tuv xml:lang = "en-US">
			<seg>
           Now we describe our architecture in detail. As discussed in the previous section the basic building block is a bottleneck depth-separable convolution with residuals. The detailed structure of this block is shown in Table 1. The architecture of MobileNetV2 contains the initial fully convolution layer with 32 filters, followed by 19 residual bottleneck layers described in the Table 2. We use ReLU6 as the non-linearity because of its robustness when used with low-precision computation [27]. We always use kernel size 3 × 3 as is standard for modern networks, and utilize dropout and batch normalization during training.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           现在我们详细描述我们的架构。正如前一节所讨论的那样，基本构件块是一个瓶颈深度可分离的残差卷积。该模块的详细结构如表1所示。MobileNetV2的架构包含具有32个滤波器的初始全卷积层，接着是表2中描述的19个残差瓶颈层。我们使用ReLU6作为非线性，因为用于低精度计算时它的鲁棒性[27]。我们总是使用现代网络中的标准核尺寸3×3，并在训练期间利用丢弃和批归一化。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "27">
		<tuv xml:lang = "en-US">
			<seg>
           Table 2: MobileNetV2 : Each line describes a sequence of 1 or more identical (modulo stride) layers, repeated $n$ times. All layers in the same sequence have the same number $c$ of output channels. The first layer of each sequence has a stride $s$ and all others use stride $1$. All spatial convolutions use 3 × 3 kernels. The expansion factor $t$ is always applied to the input size as described in Table 1.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           表2：MobileNetV2：每行描述一个或多个相同（模步长）层的序列，重复$n$次。同一序列中的所有图层具有相同数量的$c$个输出通道。每个序列的第一层有一个步长$s$，所有其他的都使用长$1$。所有空间卷积使用3×3的核。扩展系数$t$总是应用于输入尺寸，如表1所述。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "28">
		<tuv xml:lang = "en-US">
			<seg>
           With the exception of the first layer, we use constant expansion rate throughout the network. In our experiments we find that expansion rates between 5 and 10 result in nearly identical performance curves, with smaller networks being better off with slightly smaller expansion rates and larger networks having slightly better performance with larger expansion rates.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           除第一层外，我们在整个网络中使用恒定的扩展率。在我们的实验中，我们发现5到10之间的扩展速率导致几乎相同的性能曲线，较小的网络以较小的扩展速率更好，而较大的网络在较大扩展速率时具有稍微更好的性能。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "29">
		<tuv xml:lang = "en-US">
			<seg>
           For all our main experiments we use expansion factor of $6$ applied to the size of the input tensor. For example, for a bottleneck layer that takes $64$-channel input tensor and produces a tensor with $128$ channels, the intermediate expansion layer is then $64 · 6 = 384$ channels.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           对于我们所有的主要实验，我们使用扩展因子$6$来应用于输入张量的大小。例如，对于瓶颈层采用$64$通道的输入张量并产生具有$128$通道的张量，中间扩展层则具有$64·6 =384$个通道。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "30">
		<tuv xml:lang = "en-US">
			<seg>
           As in [27] we tailor our architecture to different performance points, by using the input image resolution and width multiplier as tunable hyperparameters, that can be adjusted depending on desired accuracy/performance trade-offs. Our primary network (width multiplier 1, 224 × 224), has a computational cost of 300 million multiply-adds and uses 3.4 million parameters. We explore the performance trade offs, for input resolutions from 96 to 224, and width multipliers of 0.35 to 1.4. The network computational cost ranges from 7 multiply adds to 585M MAdds, while the model size vary between 1.7M and 6.9M parameters.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           和[27]一样，我们通过使用输入图像分辨率和宽度倍数作为可调超参数来调整我们的架构以适应不同的性能点，可以根据所需的精度/性能权衡来调整。我们的主要网络（宽度乘数1，224×224）的计算成本为3亿次乘法，并使用了340万个参数。我们研究了性能权衡，输入分辨率从96到224，宽度乘数从0.35到1.4。网络计算成本范围从7次乘法增加到585M MAdds，而模型大小在1.7M个参数和6.9M个参数之间变化。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "31">
		<tuv xml:lang = "en-US">
			<seg>
           One minor implementation difference, with [27] is that for multipliers less than one, we apply width multiplier to all layers except the very last convolutional layer. This improves performance for smaller models.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           一个较小的实现差异，[27]是对于小于1的乘数，我们将宽度乘数应用于除最后一个卷积层以外的所有层。这可以提高更小模型的性能。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "32">
		<tuv xml:lang = "en-US">
			<seg>
           The inverted residual bottleneck layers allow a particularly memory efficient implementation which is very important for mobile applications. A standard efficient implementation of inference that uses for instance TensorFlow[31] or Caffe [32], builds a directed acyclic compute hypergraph $G$, consisting of edges representing the operations and nodes representing tensors of intermediate computation. The computation is scheduled in order to minimize the total number of tensors that needs to be stored in memory. In the most general case, it searches over all plausible computation orders $\Sigma (G)$ and picks the one that minimizes $$ M(G) = \min_{\pi\in \Sigma(G)} \max_{i \in 1..n} \left[\sum_{A \in R(i, \pi, G)} |A|\right] + \text{size}(\pi_i). $$ where $R(i, \pi, G)$ is the list of intermediate tensors that are connected to any of $\pi_{i}\dots \pi_{n}$ nodes, $|A|$ represents the size of the tensor $A$ and $size(i)$ is the total amount of memory needed for internal storage during operation $i$.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           倒置的残差颈层允许特定地内存有效的实现，这对于移动应用非常重要。使用TensorFlow[31]或Caffe[32]等标准高效的推断实现，构建了一个有向无环计算超图$G$，由表示操作的边和代表中间计算张量的节点组成。预定计算是为了最小化需要存储在内存中的张量总数。在最一般的情况下，它会搜索所有合理的计算顺序$\Sigma (G)$，并选择最小化$$ M(G) = \min_{\pi\in \Sigma(G)} \max_{i \in 1..n} \left[\sum_{A \in R(i, \pi, G)} |A|\right] + \text{size}(\pi_i)$$。$$其中$R(i, \pi, G)$是连接到任何$\pi_{i}\dots \pi_{n}$节点的中间张量列表，$|A|$表示张量$A$的大小，$size(i)$是操作$i$期间内部存储所需的总内存量。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "33">
		<tuv xml:lang = "en-US">
			<seg>
           For graphs that have only trivial parallel structure (such as residual connection), there is only one non-trivial feasible computation order, and thus the total amount and a bound on the memory needed for inference on compute graph $G$ can be simplified: $$M(G) = \max_{op \in G} \left[\sum_{A \in \text{op}_{inp}} |A| + \sum_{B \in \text{op}_{out}} |B| + |op|\right] \tag {2}$$ Or to restate, the amount of memory is simply the maximum total size of combined inputs and outputs across all operations. In what follows we show that if we treat a bottleneck residual block as a single operation (and treat inner convolution as a disposable tensor), the total amount of memory would be dominated by the size of bottleneck tensors, rather than the size of tensors that are internal to bottleneck (and much larger).
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           对于仅具有平凡并行结构（例如残差连接）的图，只有一个非平凡的可行计算顺序，因此可以简化计算图$G$推断所需的内存总量和界限：$$M(G) = \max_{op \in G} \left[\sum_{A \in \text{op}_{inp}} |A| + \sum_{B \in \text{op}_{out}} |B| + |op|\right] \tag {2}$$或者重申，内存量只是在所有操作中组合输入和输出的最大总大小。在下文中我们将展示如果我们将瓶颈残差块视为单一操作（并将内部卷积视为一次性张量），则总内存量将由瓶颈张量的大小决定，而不是瓶颈的内部张量的大小（更大）。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "34">
		<tuv xml:lang = "en-US">
			<seg>
           For our networks $\mathcal{N} = ReLU6 \circ dwise \circ ReLU6$, but the results apply to any per-channel transformation. Suppose the size of the input domain is $|x|$ and the size of the output domain is $|y|$, then the memory required to compute $F(X)$ can be as low as $|s^2 k| + |s’^2 k’| + O(\max(s^2, s’^2))$.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           对于我们的网络$\mathcal{N} = ReLU6 \circ dwise \circ ReLU6$，但结果适用于任何的按通道转换。假设输入域的大小是$|x|$并且输出域的大小是$|y|$，那么计算$F(X)$所需的内存可以低至$|s^2 k| + |s’^2 k’| + O(\max(s^2, s’^2))$。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "35">
		<tuv xml:lang = "en-US">
			<seg>
           The algorithm is based on the fact that the inner tensor $\cal I$ can be represented as concatenation of $t$ tensors, of size $n/t$ each and our function can then be represented as $$\mathcal{F}(x) = \sum_{i=1}^t (A_i \circ N \circ B_i)(x)$$ by  accumulating the sum, we only require one intermediate block of size $n/t$ to be kept in memory at all times. Using $n=t$ we end up having to keep only a single channel of the intermediate representation at all times. The two constraints that enabled us to use this trick is (a) the fact that the inner transformation (which includes non-linearity and depthwise) is per-channel, and (b) the consecutive non-per-channel operators have significant ratio of the input size to the output. For most of the traditional neural networks, such trick would not produce a significant improvement.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           该算法基于以下事实：内部张量$\cal I$可以表示为$t$张量的连接，每个大小为$n/t$，则我们的函数可以表示为$$\mathcal{F}(x) = \sum_{i=1}^t (A_i \circ N \circ B_i)(x)$$通过累加和，我们只需要将一个大小为$n/t$的中间块始终保留在内存中。使用$n=t$，我们最终只需要保留中间表示的单个通道。使我们能够使用这一技巧的两个约束是（a）内部变换（包括非线性和深度）是每个通道的事实，以及（b）连续的非按通道运算符具有显著的输入输出大小比。对于大多数传统的神经网络，这种技巧不会产生显著的改善。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "36">
		<tuv xml:lang = "en-US">
			<seg>
           We note that, the  number of multiply-adds operators needed to compute $F(X)$ using $t$-way split is independent of $t$, however in existing implementations we find that replacing one matrix multiplication with several smaller ones hurts runtime performance due to increased cache misses. We find that this approach is the most helpful to be used with $t$ being a small constant between $2$ and $5$. It significantly reduces the memory requirement, but still allows one to utilize most of the efficiencies gained by using highly optimized matrix multiplication and convolution operators provided by deep learning frameworks. It remains to be seen if special framework level optimization may lead to further runtime improvements.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           我们注意到，使用$t$路分割计算$F(X)$所需的乘加运算符的数目是独立于$t$的，但在现有实现中，我们发现由于增加的缓存未命中，用几个较小的矩阵乘法替换一个矩阵乘法会很损坏运行时的性能 。我们发现这种方法最有用，$t$是$2$和$5$之间的一个小常数。它显著降低了内存需求，但仍然可以利用深度学习框架提供的高度优化的矩阵乘法和卷积算子来获得的大部分效率。如果特殊的框架级优化可能导致进一步的运行时改进，这个方法还有待观察。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "37">
		<tuv xml:lang = "en-US">
			<seg>
           Table 4: Performance on ImageNet, comparison for different networks. As is common practice for ops, we count the total number of Multiply-Adds. In the last column we report running time in milliseconds (ms) for a single large core of the Google Pixel 1 phone (using TF-Lite). We do not report ShuffleNet numbers as efficient group convolutions and shuffling are not yet supported.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           表4：比较不同网络在ImageNet上的性能。正如ops的常见做法一样，我们计算Multiply-Adds的总数。在最后一列中，我们报告了Google Pixel 1手机上的一个大型核心（使用TF-Lite）的运行时间，以毫秒（ms）为单位。我们不报告ShuffleNet的数字，因为高效的群组卷积和混排尚未支持。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "38">
		<tuv xml:lang = "en-US">
			<seg>
           Figure 5: Performance curve of MobileNetV2 vs MobileNetV1, ShuffleNet, NAS. For our networks we use multipliers 0.35, 0.5, 0.75, 1.0 for all resolutions, and additional 1.4 for for 224. Best viewed in color.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           图5：MobileNetV2与MobileNetV1，ShuffleNet，NAS的性能曲线。对于我们的网络，我们对所有分辨率使用乘数0.35，0.5，0.75，1.0，对于分辨率为224，我们使用乘数1.4。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "39">
		<tuv xml:lang = "en-US">
			<seg>
           We evaluate and compare the performance of MobileNetV2 and MobileNetV1 as feature extractors [33] for object detection with a modified version of the Single Shot Detector (SSD) [34] on COCO dataset [2]. We also compare to YOLOv2 [35] and original SSD (with VGG-16 [6] as base network) as baselines. We do not compare performance with other architectures such as Faster-RCNN [36] and RFCN [37] since our focus is on mobile/real-time models.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           我们评估和比较了MobileNetV2和MobileNetV1的性能，MobileNetV1使用COCO数据集[2]上Single Shot Detector（SSD）[34]的修改版本作为目标检测的特征提取器[33]。我们还将YOLOv2[35]和原始SSD（以VGG-16[6]为基础网络）作为基准进行比较。由于我们专注于移动/实时模型，因此我们不会比较Faster-RCNN[36]和RFCN[37]等其它架构的性能。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "40">
		<tuv xml:lang = "en-US">
			<seg>
           Table 5: Comparison of the size and the computational cost between SSD and SSDLite configured with MobileNetV2 and making predictions for 80 classes.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           表5：使用MobileNetV2配置的SSD和SSDLite之间的大小和计算成本以及对80个类进行预测的比较。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "41">
		<tuv xml:lang = "en-US">
			<seg>
           For MobileNetV1, we follow the setup in [33]. For MobileNetV2, the first layer of SSDLite is attached to the expansion of layer 15 (with output stride of 16). The second and the rest of SSDLite layers are attached on top of the last layer (with output stride of 32). This setup is consistent with MobileNetV1 as all layers are attached to the feature map of the same output strides.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           对于MobileNetV1，我们按照[33]中的设置进行。对于MobileNetV2，SSDLite的第一层被附加到层15的扩展（输出步长为16）。SSDLite层的第二层和其余层连接在最后一层的顶部（输出步长为32）。此设置与MobileNetV1一致，因为所有层都附加到相同输出步长的特征图上。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "42">
		<tuv xml:lang = "en-US">
			<seg>
           Both MobileNet models are trained and evaluated with Open Source TensorFlow Object Detection API [38]. The input resolution of both models is $320 \times 320$. We benchmark and compare both mAP (COCO challenge metrics), number of parameters and number of Multiply-Adds. The results are shown in Table 6. MobileNetV2 SSDLite is not only the most efficient model, but also the most accurate of the three. Notably, MobileNetV2 SSDLite is $20\times$ more efficient and $10\times$ smaller while still outperforms YOLOv2 on COCO dataset.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           MobileNet模型都经过了开源TensorFlow目标检测API的训练和评估[38]。 两个模型的输入分辨率为$320 \times 320$。我们进行了基准测试并比较了mAP（COCO挑战度量标准），参数数量和Multiply-Adds数量。结果如表6所示。MobileNetV2 SSDLite不仅是最高效的模型，而且也是三者中最准确的模型。值得注意的是，MobileNetV2 SSDLite效率高20倍，模型要小10倍，但仍优于COCO数据集上的YOLOv2。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "43">
		<tuv xml:lang = "en-US">
			<seg>
           In this section, we compare MobileNetV1 and MobileNetV2 models used as feature extractors with DeepLabv3 [39] for the task of mobile semantic segmentation. DeepLabv3 adopts atrous convolution [40, 41, 42], a powerful tool to explicitly control the resolution of computed feature maps, and builds five parallel heads including (a) Atrous Spatial Pyramid Pooling module (ASPP) [43] containing three $3 \times 3$ convolutions with different atrous rates, (b) $1\times 1$ convolution head, and (c) Image-level features [44]. We denote by output stride the ratio of input image spatial resolution to final output resolution, which is controlled by applying the atrous convolution properly. For semantic segmentation, we usually employ output $stride = 16$ or $8$ for denser feature maps. We conduct the experiments on the PASCAL VOC 2012 dataset [3], with extra annotated images from [45] and evaluation metric mIOU.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           在本节中，我们使用MobileNetV1和MobileNetV2模型作为特征提取器与DeepLabv3[39]在移动语义分割任务上进行比较。DeepLabv3采用了空洞卷积[40,41,42]，这是一种显式控制计算特征映射分辨率的强大工具，并构建了五个平行头部，包括（a）包含三个具有不同空洞率的$3 \times 3$卷积的Atrous Spatial Pyramid Pooling模块(ASPP)[43]，（b）$1 \times 1$卷积头部，以及（c）图像级特征[44]。我们用输出步长来表示输入图像空间分辨率与最终输出分辨率的比值，该分辨率通过适当地应用空洞卷积来控制。对于语义分割，我们通常使用输出$stride = 16$或$8$来获取更密集的特征映射。我们在PASCAL VOC 2012数据集[3]上进行了实验，使用[45]中的额外标注图像和评估指标mIOU。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "44">
		<tuv xml:lang = "en-US">
			<seg>
           To build a mobile model, we experimented with three design variations: (1) different feature extractors, (2) simplifying the DeepLabv3 heads for faster computation, and (3) different inference strategies for boosting the performance. Our results are summarized in Table 7. We have observed that: (a) the inference strategies, including multi-scale inputs and adding left-right flipped images, significantly increase the MAdds and thus are not suitable for on-device applications, (b) using output stride = 16 is more efficient than output stride = 8, (c) MobileNetV1 is already a powerful feature extractor and only requires about 4.9 - 5.7 times fewer MAdds than ResNet-101 [8] (e.g., mIOU: 78.56 vs 82.70, and MAdds: 941.9B vs 4870.6B), (d) it is more efficient to build DeepLabv3 heads on top of the second last feature map of MobileNetV2 than on the original last-layer feature map, since the second to last feature map contains 320 channels instead of 1280, and by doing so, we attain similar performance, but require about 2.5 times fewer operations than the MobileNetV1 counterparts, and (e) DeepLabv3 heads are computationally expensive and removing the ASPP module significantly reduces the MAdds with only a slight performance degradation. In the end of the Table 7, we identify a potential candidate for on-device applications (in bold face), which attains $75.32\%$ mIOU and only requires 2.75B MAdds.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           为了构建移动模型，我们尝试了三种设计变体：（1）不同的特征提取器，（2）简化DeepLabv3头部以加快计算速度，以及（3）提高性能的不同推断策略。我们的结果总结在表7中。我们已经观察到：（a）包括多尺度输入和添加左右翻转图像的推断策略显著增加了MAdds，因此不适合于在设备上应用，（b）使用输出步长16比使用输出步长8更有效率，（c）MobileNetV1已经是一个强大的特征提取器，并且只需要比ResNet-101少约4.9-5.7倍的MAdd[8]（例如，mIOU：78.56与82.70和MAdds：941.9B vs 4870.6B），（d）在MobileNetV2的倒数第二个特征映射的顶部构建DeepLabv3头部比在原始的最后一个特征映射上更高效，因为倒数第二个特征映射包含320个通道而不是1280个通道，这样我们就可以达到类似的性能，但是要比MobileNetV1的通道少2.5倍，（e）DeepLabv3头部的计算成本很高，移除ASPP模块会显著减少MAdd并且只会稍微降低性能。在表7末尾，我们鉴定了一个设备上的潜在候选应用（粗体），该应用可以达到$75.32\%$mIOU并且只需要2.75B MAdds。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "45">
		<tuv xml:lang = "en-US">
			<seg>
           Table 7: MobileNet + DeepLabv3 inference strategy on the PASCAL VOC 2012 validation set. MNet V2*: Second last feature map is used for DeepLabv3 heads, which includes (1) Atrous Spatial Pyramid Pooling (ASPP) module, and (2) $1 \times 1$ convolution as well as image-pooling feature. OS: output stride that controls the output resolution of the segmentation map. MF: Multi-scale and left-right flipped inputs during test. All of the models have been pretrained on COCO. The potential candidate for on-device applications is shown in bold face. PASCAL images have dimension $512 \times 512$ and atrous convolution allows us to control output feature resolution without increasing the number of parameters.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           表7：PASCAL VOC 2012验证集上的MobileNet+DeepLabv3推断策略。MNet V2*：用于DeepLabv3头部的倒数第二个特征映射，其中包括（1）Atrous Spatial Pyramid Pooling（ASPP）模块和（2）$1\times 1$卷积以及图像池化功能。OS：控制分割映射输出分辨率的输出步长。MF：测试期间多尺度和左右翻转输入。所有的模型都在COCO上进行预训练。设备上的潜在候选应用以粗体显示。PASCAL图像的尺寸为$ 512 \ times 512 $，而空洞卷积使得我们可以在不增加参数数量的情况下控制输出特征分辨率。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "46">
		<tuv xml:lang = "en-US">
			<seg>
           Figure 6: The impact of non-linearities and various types of shortcut (residual) connections.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           图6：非线性和各种快捷（残差）连接的影响。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "47">
		<tuv xml:lang = "en-US">
			<seg>
           We described a very simple network architecture that allowed us to build a family of highly efficient mobile models. Our basic building unit, has several properties that make it particularly suitable for mobile applications. It allows very memory-efficient inference and relies utilize standard operations present in all neural frameworks.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           我们描述了一个非常简单的网络架构，使我们能够构建一系列高效的移动模型。我们的基本构建单元具有多种特性，使其特别适用于移动应用。它允许非常有效的内存推断，并依赖利用所有神经框架中的标准操作。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "48">
		<tuv xml:lang = "en-US">
			<seg>
           For the ImageNet dataset, our architecture improves the state of the art for wide range of performance points. For object detection task, our network outperforms state-of-art realtime detectors on COCO dataset both in terms of accuracy and model complexity. Notably, our architecture combined with the SSDLite detection module is 20× less computation and 10× less parameters than YOLOv2.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           对于ImageNet数据集，我们的架构改善了许多性能点的最新技术水平。对于目标检测任务，我们的网络在精度和模型复杂度方面都优于COCO数据集上的最新实时检测器。值得注意的是，我们的架构与SSDLite检测模块相比，计算量少20倍，参数比YOLOv2少10倍。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "49">
		<tuv xml:lang = "en-US">
			<seg>
           On the theoretical side: the proposed convolutional block has a unique property that allows to separate the network expressiviness (encoded by expansion layers) from its capacity (encoded by bottleneck inputs). Exploring this is an important direction for future research.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           理论上：所提出的卷积块具有独特的属性，允许将网络表现力（由扩展层编码）与其容量（由瓶颈输入编码）分开。探索这个是未来研究的重要方向。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "50">
		<tuv xml:lang = "en-US">
			<seg>
           We would like to thank Matt Streeter and Sergey Ioffe for their helpful feedback and discussion.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           我们要感谢Matt Streeter和Sergey Ioffe的有益反馈和讨论。
          
			</seg>
		</tuv>
	</tu>
	<tu tuid = "51">
		<tuv xml:lang = "en-US">
			<seg>
           [1] Olga Russakovsky, Jia Deng, Hao Su, Jonathan Krause, Sanjeev Satheesh, Sean Ma, Zhiheng Huang, Andrej Karpathy, Aditya Khosla, Michael Bernstein, Alexander C. Berg, and Li Fei-Fei. Imagenet large scale visual recognition challenge. Int. J. Comput. Vision, 115(3):211–252, December 2015.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
               微信打赏
              
			</seg>
		</tuv>
	</tu>
	<tu tuid = "52">
		<tuv xml:lang = "en-US">
			<seg>
           [2] Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays, Pietro Perona, Deva Ramanan, Piotr Dollár, and C Lawrence Zitnick. Microsoft COCO: Common objects in context. In ECCV, 2014.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
               支付宝打赏
              
			</seg>
		</tuv>
	</tu>
	<tu tuid = "53">
		<tuv xml:lang = "en-US">
			<seg>
           [3] Mark Everingham, S. M. Ali Eslami, Luc Van Gool, Christopher K. I. Williams, John Winn, and Andrew Zisserma. The pascal visual object classes challenge a retrospective. IJCV, 2014.
          
			</seg>
		</tuv>
		<tuv xml:lang = "zh-CN">
			<seg>
           工作中的技术总结
          
			</seg>
		</tuv>
	</tu>

